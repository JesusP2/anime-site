---
import type { FullAnimeRecord } from "@/lib/types";
import { Badge } from "@/components/ui/badge";
import { KeyStaffCard } from "@/components/key-staff-card";
import { MainCharacterCard } from "@/components/main-character-card";
import { StatusDropdown } from "./status-dropdown";
import type { User } from "better-auth";
type Props = {
  anime: FullAnimeRecord;
  user: User | null;
};
const { anime, user } = Astro.props;
const animeTitle =
  anime.titles?.find((title) => title.type === "English")?.title ||
  anime.titles?.find((title) => title.type === "Default")?.title;
---

<div class="container mx-auto px-4 py-8">
  <div class="flex flex-col xl:flex-row justify-between gap-x-8">
    <div class="xl:w-1/3 min-w-[300px]">
      <img
        src={anime.images?.webp?.large_image_url}
        alt={animeTitle}
        class="w-full max-w-sm xl:max-w-7xl mx-auto rounded-lg shadow-lg mb-5"
      />
    </div>

    <div class="flex-1">
      <h1 class="text-4xl font-bold mb-2">
        {animeTitle}
      </h1>
      <div class="mb-4">
        {
          anime.titles
            ?.filter(
              (title) =>
                title.type &&
                ["English", "Default", "Japanese"].includes(title.type),
            )
            .map((title) => (
              <Badge className="mr-4 mt-2" variant="secondary">
                {title.title} ({title.type})
              </Badge>
            ))
        }
      </div>

      <div class="grid grid-cols-1 grid-cols-4 gap-4 mb-6 max-w-lg">
        {
          anime.score ? (
            <div class="bg-blue-50 grid place-items-center p-3 rounded-lg text-center">
              <div>
                <p class="text-xs sm:text-[15px] font-bold text-blue-600">
                  ‚≠ê {anime.score}
                </p>
                <p class="text-xs sm:text-[15px] text-gray-600">Score</p>
              </div>
            </div>
          ) : (
            "Unknown"
          )
        }
        {
          anime.rank ? (
            <div class="bg-purple-50 grid place-items-center p-3 rounded-lg text-center">
              <div>
                <p class="text-xs sm:text-[15px] font-bold text-purple-600">
                  #{anime.rank}
                </p>
                <p class="text-xs sm:text-sm text-gray-600">Rank</p>
              </div>
            </div>
          ) : (
            "Unknown"
          )
        }
        {
          anime.popularity ? (
            <div class="bg-green-50 grid place-items-center p-3 rounded-lg text-center">
              <div>
                <p class="text-xs sm:text-[15px] font-bold text-green-600">
                  #{anime.popularity}
                </p>
                <p class="text-xs sm:text-sm text-gray-600">Popularity</p>
              </div>
            </div>
          ) : (
            "Unknown"
          )
        }
        {
          anime.members ? (
            <div class="bg-orange-50 grid place-items-center p-3 rounded-lg text-center">
              <div>
                <p class="text-xs sm:text-[15px] font-bold text-orange-600">
                  {anime.members.toLocaleString()}
                </p>
                <p class="text-xs sm:text-sm text-gray-600">Members</p>
              </div>
            </div>
          ) : (
            "Unknown"
          )
        }
      </div>

      <StatusDropdown data={anime} entityType="ANIME" user={user} client:load />

      <div class="mt-4">
        {
          anime.synopsis ? (
            <div class="mb-6">
              <h2 class="text-xl font-semibold mb-2">Synopsis</h2>
              <p class="text-gray-700 leading-relaxed">{anime.synopsis}</p>
            </div>
          ) : (
            "Unknown"
          )
        }
      </div>

      <h2 class="text-xl font-semibold mb-3">Information</h2>
      <div class="bg-white rounded-lg p-5 shadow-sm">
        <div class="space-y-4">
          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Type</div>
            <div class="text-gray-900">{anime.type}</div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Episodes</div>
            <div class="text-gray-900">{anime.episodes || "Unknown"}</div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Status</div>
            <div class="text-gray-900">{anime.status}</div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Season</div>
            <div class="text-gray-900 capitalize">
              {`${anime.season} ${anime.year}`}
            </div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Aired</div>
            <div class="text-gray-900">
              {
                anime.aired?.from
                  ? new Date(anime.aired.from).toLocaleDateString()
                  : "?"
              }
              {" to "}
              {
                anime.aired?.to
                  ? new Date(anime.aired.to).toLocaleDateString()
                  : "?"
              }
            </div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Rating</div>
            <div class="text-gray-900">{anime.rating}</div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Genres</div>
            <div class="text-gray-900">
              <div class="flex flex-wrap gap-2">
                {
                  anime.genres?.map((genre) => (
                    <span class="bg-purple-50 text-purple-600 text-sm px-2 py-1 rounded">
                      {genre.name}
                    </span>
                  ))
                }
              </div>
            </div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Demographics</div>
            <div class="text-gray-900">
              {
                anime.demographics?.map((demographic) => (
                  <Badge variant="secondary">{demographic.name}</Badge>
                )) ?? "Unknown"
              }
            </div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Studios</div>
            <div class="text-gray-900">
              <div class="flex flex-wrap gap-2">
                {
                  anime.studios?.map((studio) => (
                    <span class="bg-blue-50 text-blue-600 text-sm px-2 py-1 rounded">
                      {studio.name}
                    </span>
                  ))
                }
              </div>
            </div>
          </div>

          <div class="flex border-b border-gray-100 pb-3">
            <div class="w-32 text-gray-500">Broadcast</div>
            <div class="text-gray-900">
              {anime.broadcast?.string || "Unknown"}
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="mt-8">
    {
      anime.characters && anime.characters.length > 0 && (
        <div>
          <h2 class="text-xl font-semibold mb-3">Main Characters</h2>
          <div class="grid staff-auto-fill-grid gap-6">
            {anime.characters.slice(0, 6).map((char) => (
              <MainCharacterCard character={char.character} role={char.role} />
            ))}
          </div>
        </div>
      )
    }
  </div>
  <div class="mt-8">
    {
      anime.staff && anime.staff.length > 0 && (
        <div>
          <h2 class="text-xl font-semibold mb-3">Key Staff</h2>
          <div class="grid staff-auto-fill-grid gap-6">
            {anime.staff.slice(0, 6).map(({ person, positions }) => (
              <KeyStaffCard staff={person} positions={positions} />
            ))}
          </div>
        </div>
      )
    }
  </div>

  {
    anime.episodes_info && anime.episodes_info.length > 0 && (
      <div class="mt-12">
        <h2 class="text-xl font-semibold mb-3">Episodes</h2>
        <div class="grid gap-4">
          {anime.episodes_info.map((episode) => (
            <div class="bg-white p-4 rounded-lg shadow-sm">
              <div class="flex justify-between items-center mb-2">
                <h3 class="font-semibold">
                  Episode {episode.mal_id}: {episode.title}
                </h3>
                <span class="text-sm text-gray-600">
                  {episode.aired &&
                    new Date(episode.aired).toLocaleDateString()}
                </span>
              </div>
            </div>
          ))}
        </div>
      </div>
    )
  }

  {
    anime.streaming && anime.streaming.length > 0 && (
      <div class="mt-12 mb-8">
        <h2 class="text-xl font-semibold mb-3">Where to Watch</h2>
        <div class="flex flex-wrap gap-3">
          {anime.streaming.map((link) => (
            <a
              href={link.url}
              target="_blank"
              rel="noopener noreferrer"
              class="inline-flex items-center px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
            >
              {link.name}
            </a>
          ))}
        </div>
      </div>
    )
  }
</div>
