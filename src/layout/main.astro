---
import Head from "@/components/head.astro";
import { AppSidebar } from "@/components/app-sidebar";
import type { Entity, EntityStatus } from "@/lib/types";
import { createReadPresignedUrl } from "@/lib/s3";
import NavUserWrapper from "@/components/nav-user-wrapper.astro";
import { SignInButton } from "@/components/signin-button";

type Props = {
  title: string;
  description?: string;
  image?: string;
  path?: string;
} & (
  | {
      page: "Search";
      searchType: Entity;
    }
  | {
      page: "mal_id";
    }
  | {
      page: Entity;
      entityStatus: EntityStatus;
    }
);
const { title, description, image, path, ...props } = Astro.props;
const user = Astro.locals.user;
if (user && !user.image) {
  const img = await createReadPresignedUrl(`${user.id}/avatar`);
  user.image = img;
}
const isDarkMode = Astro.cookies.get("theme")?.value === "dark";
---

<html lang="en" class={isDarkMode ? "dark" : ""}>
  <Head title={title} description={description} image={image} path={path} />
  <body class="bg-sidebar">
    <div class="texture" style="view-transition-name: page-texture"></div>
    <AppSidebar
      variant="inset"
      user={user}
      title={title}
      url={Astro.url.toString()}
      searchProps={props}
      client:load
    >
      <slot />
      <NavUserWrapper server:defer slot="dropdown">
        <SignInButton slot="fallback" client:load />
      </NavUserWrapper>
    </AppSidebar>
    <script is:inline>
      function updateSidebarState() {
        const $sidebar = document.getElementById("sidebar");
        // Check if the cookie exists and has the value 'true'
        const isSidebarOpen = document.cookie
          .split("; ")
          .some(
            (row) =>
              row.startsWith("sidebar_state=") && row.split("=")[1] === "true",
          );
        if ($sidebar) {
          console.log("inline script:", Date.now());
          console.log("isSidebarOpen: ", isSidebarOpen);
          $sidebar.setAttribute(
            "data-state",
            isSidebarOpen ? "expanded" : "collapsed",
          );
          // Only set data-collapsible if it's meant to be collapsed
          if (!isSidebarOpen) {
            $sidebar.setAttribute("data-collapsible", "icon");
          } else {
            // Remove the attribute if it's expanded
            $sidebar.removeAttribute("data-collapsible");
          }
        }
      }

      updateSidebarState();
      document.addEventListener("astro:after-swap", updateSidebarState);
    </script>
  </body>
</html>
