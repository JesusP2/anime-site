---
import Head from "@/components/head.astro";
import { AppSidebar } from "@/components/app-sidebar";
import type { Entity, EntityStatus } from "@/lib/types";
import { createReadPresignedUrl } from "@/lib/s3";
import NavUserWrapper from "@/components/nav-user-wrapper.astro";
import { SignInButton } from "@/components/signin-button";
import { SIDEBAR_COOKIE_NAME } from "@/components/ui/sidebar";

type Props = {
  title: string;
  description?: string;
  image?: string;
  path?: string;
} & (
  | {
      page: "Search";
      searchType: Entity;
    }
  | {
      page: "mal_id";
    }
  | {
      page: Entity;
      entityStatus: EntityStatus;
    }
);
const { title, description, image, path, ...props } = Astro.props;
const user = Astro.locals.user;
if (user && !user.image) {
  const img = await createReadPresignedUrl(`${user.id}/avatar`);
  user.image = img;
}
const isDarkMode = Astro.cookies.get("theme")?.value === "dark";
---

<html lang="en" class={isDarkMode ? "dark" : ""}>
  <Head title={title} description={description} image={image} path={path} />
  <body class="bg-sidebar">
    <script define:vars={{ SIDEBAR_COOKIE_NAME }} is:inline>
      function updateSidebarStateFromCookie(newDocument) {
        let localDocument = document;
        if (newDocument) {
          localDocument = newDocument;
        }
        const cookieValue = document.cookie
          .split("; ")
          .find((row) => row.startsWith(SIDEBAR_COOKIE_NAME + "="))
          ?.split("=")[1];

        const shouldBeOpen = cookieValue === "true";
        const targetState = shouldBeOpen ? "expanded" : "collapsed";

        const sidebarElement = localDocument.getElementById("sidebar");

        if (sidebarElement) {
          if (sidebarElement.dataset.state !== targetState) {
            sidebarElement.dataset.state = targetState;
          }

          if (
            targetState === "expanded" &&
            sidebarElement.dataset.collapsible !== ""
          ) {
            sidebarElement.dataset.collapsible = "";
          }
        }
      }

      updateSidebarStateFromCookie();

      document.addEventListener("astro:before-swap", (e) =>
        updateSidebarStateFromCookie(e.newDocument),
      );
    </script>
    <div class="texture" style="view-transition-name: page-texture"></div>
    <AppSidebar
      variant="inset"
      user={user}
      title={title}
      url={Astro.url.toString()}
      searchProps={props}
      client:load
    >
      <slot />
      <NavUserWrapper server:defer slot="dropdown">
        <SignInButton slot="fallback" client:load />
      </NavUserWrapper>
    </AppSidebar>
  </body>
</html>
