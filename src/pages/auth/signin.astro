---
import "@/styles/global.css";
import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";
import { labelVariants } from "@/components/ui/label";
import { inputVariants } from "@/components/ui/input";
import AuthLayout from "@/layout/auth.astro";
import AuthLink from "@/components/auth-link.astro";
import Turnstile from "@/components/turnstile.astro";
import { Eye, EyeOff } from "lucide-react";
if (Astro.locals.user) {
  return Astro.redirect("/");
}
Astro.response.headers.set("Cloudflare-CDN-Cache-Control", "max-age=86400");
---

<AuthLayout title="Login">
  <!-- Container for the image sequence animation -->
  <Fragment slot="animation">
    <div
      id="frame-animation"
      class="absolute left-[calc(50%)] top-[20px] w-[200px] h-[200px] bg-contain bg-no-repeat bg-center z-30"
      style={{
        "background-image": `url('/frames/frame001.avif')`,
        "view-transition-name": "auth-layer-1",
      }}
    >
    </div>
    <div
      id="frame-animation-hidden"
      class="absolute left-[calc(50%-100px)] top-[20px] w-[200px] h-[200px] bg-contain bg-no-repeat bg-center"
      style="background-image: url('/frames/frame001.avif'); opacity: 0;"
    >
    </div>
  </Fragment>
  <h1 slot="card-title">Welcome back</h1>
  <h1 slot="card-description">Login using one of the options below</h1>
  <Fragment slot="card-content">
    <section class="mb-4 flex flex-col gap-y-4">
      <button
        id="google-btn"
        class={cn(
          buttonVariants({ variant: "outline" }),
          "w-full flex gap-x-2",
        )}
      >
        <img src="/google.svg" />
        Login with Google
      </button>
    </section>
    <section class="relative py-4">
      <div class="absolute inset-0 flex items-center">
        <span class="w-full border-t"></span>
      </div>
      <div class="relative flex justify-center text-xs uppercase">
        <span class="bg-background px-2"> Or continue with email </span>
      </div>
    </section>
    <form method="POST">
      <span id="form-error" class="text-sm text-red-500"></span>
      <section class="grid gap-4">
        <div class="grid gap-2">
          <label class={labelVariants()} for="email">Email</label>
          <input
            transition:persist
            class={inputVariants()}
            id="email"
            name="email"
            placeholder="example@gmail.com"
            autocomplete="email webauthn"
            required
          />
        </div>
        <div class="grid gap-2">
          <div class="flex items-center">
            <div class="flex items-center gap-x-1">
              <label class={labelVariants()} for="password">Password</label>
              <button class="eye-btn p-1 rounded hover:bg-muted" type="button">
                <Eye className="eye-line" size={17} strokeWidth={1.5} />
                <EyeOff
                  className="eye-off-line hidden"
                  size={17}
                  strokeWidth={1.5}
                />
              </button>
            </div>
            <AuthLink href="/auth/forgot-password">
              Forgot your password?
            </AuthLink>
          </div>
          <input
            transition:persist
            class={inputVariants()}
            id="password"
            name="password"
            type="password"
            autocomplete="current-password webauthn"
            required
          />
        </div>
        <Turnstile />
        <button class={cn(buttonVariants({ variant: "default" }), "w-full")}>
          Login
        </button>
        <a
          class={cn(buttonVariants({ variant: "default" }), "w-full")}
          href="/auth/magic-link"
        >
          Login with magic link
        </a>
      </section>
    </form>
    <section class="mt-4 text-center text-sm">
      Don&apos;t have an account?{" "}
      <AuthLink href="/auth/signup"> Sign up </AuthLink>
    </section>
  </Fragment>
</AuthLayout>

<script>
  import { authClient } from "@/lib/auth-client";
  import { googleBtnEvent, eyeBtnEvent } from "@/lib/auth-events";
  function initializeEvents() {
    googleBtnEvent();
    eyeBtnEvent();

    const form = document.querySelector("form");
    const formError = document.querySelector<HTMLSpanElement>("#form-error");
    form?.addEventListener("submit", async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);
      const { error } = await authClient.signIn.email({
        email: formData.get("email") as string,
        password: formData.get("password") as string,
        callbackURL: "/",
        fetchOptions: {
          headers: {
            "x-captcha-response": formData.get(
              "cf-turnstile-response",
            ) as string,
          },
        },
      });
      if (error?.message && formError) {
        formError.innerText = error.message;
      }
    });
  }

  initializeEvents();
  document.addEventListener("astro:after-swap", initializeEvents);
</script>
