---
import MainLayout from "@/layout/main.astro";
import EmptyItems from "@/components/empty-items.astro";
import { AnimeCard } from "@/components/anime-card";
import { MainPagination } from "@/components/pagination";
import { SearchWithFilters } from "@/components/search";
import { animeFilters } from "@/lib/anime/filters";
import {
  getAnimesWithStatus,
  getAnimesWithStatusCount,
} from "@/lib/anime/data-access";

const _currentPage = Astro.url.searchParams.get("page") || "1";
const currentPage = isNaN(parseInt(_currentPage || ""))
  ? 1
  : parseInt(_currentPage);
const searchParams = new URLSearchParams(Astro.url.searchParams);

const animesPerPage = 25;
const [animesCount, animeRecords] = await Promise.all([
  getAnimesWithStatusCount(
    "watching",
    searchParams,
    animesPerPage,
    Astro.locals.user?.id,
  ),
  getAnimesWithStatus(
    "watching",
    searchParams,
    animesPerPage,
    Astro.locals.user?.id,
  ),
]);
---

<MainLayout title="title">
  <SearchWithFilters
    url={new URL(Astro.url)}
    options={animeFilters}
    client:load
  />
  <div class="grid auto-fill-grid gap-6 px-10 w-full mx-auto">
    {
      animesCount.isOk() &&
      animeRecords.isOk() &&
      animeRecords.value.length > 0 ? (
        <div class="grid auto-fill-grid gap-6 px-10 w-full mx-auto bg-blue-100">
          {animeRecords.value.map((item) => (
            <AnimeCard data={item} client:load />
          ))}
        </div>
      ) : (
        <EmptyItems />
      )
    }
  </div>
  <div class="flex justify-center my-6">
    {
      animesCount.isOk() ? (
        <MainPagination
          url={new URL(Astro.url)}
          lastVisiblePage={Math.ceil((animesCount.value ?? 0) / animesPerPage)}
          currentPage={currentPage}
          client:load
        />
      ) : (
        <MainPagination
          url={new URL(Astro.url)}
          lastVisiblePage={1}
          currentPage={currentPage}
          client:load
        />
      )
    }
  </div>
</MainLayout>
