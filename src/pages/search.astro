---
import MainLayout from "@/layout/main.astro";
import { getAnimes } from "@/lib/anime/queries";
import {
  getRecordsPerPage,
  getCurrentPage,
} from "@/lib/utils/records-per-page";
import { getMangas } from "@/lib/manga/queries";
import { Grid } from "@/components/grid";
import type { Entity } from "@/lib/types";
import { animeEntity } from "@/lib/constants";
import { cache } from "@/lib/redis-cache";
import { sanitizeSearchParams } from "@/lib/utils/sanitize-searchparams";
import { mangaFilters } from "@/lib/manga/filters";
import { animeFilters } from "@/lib/anime/filters";

const currentPage = getCurrentPage(Astro.url.searchParams);

const recordsPerPage = getRecordsPerPage(Astro.url.searchParams);
const searchParams = new URLSearchParams(Astro.url.searchParams);
const fn =
  searchParams.get("searchType") === "Manga"
    ? cache(getMangas, (searchParams) => {
        const key = sanitizeSearchParams(searchParams, mangaFilters).toString();
        return `manga.v1.${key}`;
      })
    : cache(getAnimes, (searchParams) => {
        const key = sanitizeSearchParams(searchParams, animeFilters).toString();
        return `anime.v1.${key}`;
      });
const records = await fn(searchParams, recordsPerPage);
const searchType = (searchParams.get("searchType") ?? animeEntity) as Entity;
Astro.response.headers.set('Cloudflare-CDN-Cache-Control', 'max-age=86400');
---

<MainLayout title="Anime Search" searchType={searchType} page="Search">
  <Grid
    url={Astro.url.toString()}
    records={records}
    currentPage={currentPage}
    recordsPerPage={recordsPerPage}
    client:load
  />
</MainLayout>
