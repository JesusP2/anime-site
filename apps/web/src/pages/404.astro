---
// No server-side Astro logic needed for the basic structure yet
---

<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>404 Not Found</title>
        <style>
            body {
                margin: 0;
                display: flex;
                flex-direction: column; /* Center content vertically */
                align-items: center;
                justify-content: center;
                min-height: 100vh;
                background-color: #f0f0f0; /* A light background color */
                font-family: sans-serif;
                background-image: url('/slam-dunk.jpeg');
                background-size: cover;
                background-position: center center;
                background-repeat: no-repeat;
                overflow: hidden;
                position: relative; /* Required for the ::before pseudo-element positioning context if it were 'absolute' */
                                  /* Also helps if any child elements use z-indexing related to body */
                /* Initialize CSS variables for mouse position, default to center */
                --mouse-x: 50vw;
                --mouse-y: 50vh;
            }

            body::before {
                content: '';
                position: fixed; /* Covers the entire viewport */
                top: 0;
                left: 0;
                width: 100vw;
                height: 100vh;
                background-color: rgba(0, 0, 0, 0.95); /* Dark overlay, makes original bg 95% obscured */
                pointer-events: none; /* Allows mouse events to pass through to elements below */
                
                /* Spotlight effect using mask */
                /* Where the mask is transparent, body::before is not rendered, revealing body's true background (image) */
                /* Where the mask is opaque black, body::before *is* rendered, showing its own background-color */
                mask-image: radial-gradient(
                    circle at var(--mouse-x) var(--mouse-y),
                    transparent 0,      /* Center of spotlight: body::before is transparent here */
                    transparent 120px,  /* Spotlight radius: still transparent - was 150px */
                    rgba(0, 0, 0, 1) 400px /* Edge of spotlight: body::before becomes opaque (shows its dark bg) - was 400px */
                );
                -webkit-mask-image: radial-gradient(
                    circle at var(--mouse-x) var(--mouse-y),
                    transparent 0,
                    transparent 120px, /* was 150px */
                    rgba(0, 0, 0, 1) 400px /* was 400px */
                );
                /* z-index is not strictly needed here if other content doesn't have specific z-indexes,
                   as ::before renders under the main content of the body by default.
                   If content had z-index: -1 or similar, this might need adjustment.
                   Given current structure, this should be fine. */
            }

            .canvas-container {
                display: flex;
                justify-content: center; /* Center canvases horizontally */
                align-items: center; /* Align canvases vertically */
                width: 100%; /* Changed from 95% to allow more growth */
                max-width: 2100px; /* Increased from 1400px (1400 * 1.5 = 2100) */
                gap: clamp(
                    10px,
                    3vw,
                    40px
                ); /* Responsive gap based on viewport width, 2-4% approx */
                perspective: 1200px; /* Maintained from previous adjustment for pronounced tilt */
            }
            canvas {
                width: 450px;
                display: block; /* Remove extra space below canvas */
                transition: transform 0.1s ease-out; /* Smooth tilt transition */
            }
            .message-container {
                text-align: center;
                margin-top: 20px;
            }
            h1 {
                font-size: 2rem;
                color: #333;
            }
            p {
                font-size: 1rem;
                color: #555;
            }
            a {
                color: #007bff;
                text-decoration: none;
            }
            a:hover {
                text-decoration: underline;
            }
        </style>
    </head>
    <body>
        <div class="canvas-container">
            <canvas id="canvas1"></canvas>
            <canvas id="canvas2"></canvas>
            <canvas id="canvas3"></canvas>
        </div>

        <script>
            // --- Constants for Grid and JJK Images ---
            const NUM_JJK_IMAGES = 29;
            const JJK_IMAGE_BASE_PATH = "/jjk/jjk"; // e.g., /jjk/jjk1.png

            const NUM_COLS = 3;
            const NUM_ROWS = 4;
            const CELL_GAP_PERCENT = 0.1;

            // Format: array of [row, col] for each digit
            /** @type {[number, number][]} */
            const formatFor4Pattern = [
                [0, 0], [0, 2],
                [1, 0], [1, 2],
                [2, 0], [2, 1], [2, 2],
                [3, 2],
            ];
            /** @type {[number, number][][]} */
            const visibleCellsPattern = [
                formatFor4Pattern, // For canvas1
                [ // For canvas2 (0-like pattern)
                    [0, 0], [0, 1], [0, 2],
                    [1, 0], [1, 2],
                    [2, 0], [2, 2],
                    [3, 0], [3, 1], [3, 2],
                ],
                formatFor4Pattern, // For canvas3
            ];

            // --- Global State for JJK Image Feature ---
            /** @type {(HTMLImageElement | null)[]} */
            let allJJKImages = new Array(NUM_JJK_IMAGES).fill(null);
            let jjkImagesLoadedCount = 0;
            let jjkImagesSuccessfullyLoaded = 0;

            /**
             * @typedef {object} CanvasState
             * @property {string} id
             * @property {HTMLCanvasElement} canvasElement
             * @property {CanvasRenderingContext2D} ctx
             * @property {number} canvasIndex
             * @property {[number, number][]} activePattern - Array of [row, col] tuples
             * @property {HTMLImageElement | null} defaultImage
             * @property {HTMLImageElement | null} currentImageToDraw
             * @property {string | null} hoveredCellKey - format: "r-c" for this canvas
             * @property {number} [canvasActualWidth]
             * @property {number} [canvasActualHeight]
             * @property {number} [cellWidth]
             * @property {number} [gap]
             * @property {number} [cellHeight]
             */

            /** @type {CanvasState[]} */
            let canvasDisplayStates = [];

            /** @type {Map<string, HTMLImageElement>} */
            const activeCellToImageMap = new Map(); // Key: "canvasIndex-r-c" -> Image

            const canvasElementsRaw = [
                document.getElementById("canvas1"),
                document.getElementById("canvas2"),
                document.getElementById("canvas3"),
            ];

            // --- JJK Image Loading Function ---
            function loadJJKImages() {
                for (let i = 0; i < NUM_JJK_IMAGES; i++) {
                    const img = new Image();
                    img.onload = () => {
                        allJJKImages[i] = img;
                        jjkImagesSuccessfullyLoaded++;
                        jjkImagesLoadedCount++;
                        if (jjkImagesLoadedCount === NUM_JJK_IMAGES) {
                            console.log(`All ${NUM_JJK_IMAGES} JJK image load attempts complete. ${jjkImagesSuccessfullyLoaded} successful.`);
                            assignImagesAndSetupCanvases();
                        }
                    };
                    img.onerror = () => {
                        console.error(`Error loading image: ${JJK_IMAGE_BASE_PATH}${i + 1}.png`);
                        allJJKImages[i] = null;
                        jjkImagesLoadedCount++;
                        if (jjkImagesLoadedCount === NUM_JJK_IMAGES) {
                            console.log(`All ${NUM_JJK_IMAGES} JJK image load attempts complete. ${jjkImagesSuccessfullyLoaded} successful.`);
                            assignImagesAndSetupCanvases();
                        }
                    };
                    img.src = `${JJK_IMAGE_BASE_PATH}${i + 1}.png`;
                }
            }
            
            // --- Mouse Event Handlers (defined before use in assignImagesAndSetupCanvases) ---
            /** 
             * @param {MouseEvent} event 
             * @param {CanvasState} state 
             */
            function handleCanvasMouseMove(event, state) {
                const { canvasElement, activePattern, defaultImage, cellWidth, gap, cellHeight, canvasIndex } = state;
                if (typeof cellWidth !== 'number' || typeof gap !== 'number' || typeof cellHeight !== 'number') return;

                const rect = canvasElement.getBoundingClientRect();
                const mouseX = event.clientX - rect.left;
                const mouseY = event.clientY - rect.top;
                
                let newHoveredCellKey = null;
                let newImageToDraw = defaultImage;

                for (let r = 0; r < NUM_ROWS; r++) {
                    for (let c = 0; c < NUM_COLS; c++) {
                        const cellX = gap + c * (cellWidth + gap);
                        const cellY = gap + r * (cellHeight + gap);

                        if (mouseX >= cellX && mouseX < cellX + cellWidth &&
                            mouseY >= cellY && mouseY < cellY + cellHeight) {
                            
                            /** @param {[number, number]} p */
                            if (activePattern.some(p => p[0] === r && p[1] === c)) {
                                newHoveredCellKey = `${r}-${c}`; // Store cell as "r-c"
                                const mapKey = `${canvasIndex}-${r}-${c}`;
                                newImageToDraw = activeCellToImageMap.get(mapKey) || defaultImage;
                            }
                            break; 
                        }
                    }
                    if (newHoveredCellKey !== null && newImageToDraw !== defaultImage) break;
                    if (newHoveredCellKey !== null) break; 
                }

                if (state.hoveredCellKey !== newHoveredCellKey || state.currentImageToDraw !== newImageToDraw) {
                    state.hoveredCellKey = newHoveredCellKey;
                    state.currentImageToDraw = newImageToDraw;
                    requestAnimationFrame(() => drawCanvas(state)); // drawCanvas expects CanvasState
                }
            }

            /** @param {CanvasState} state */
            function handleCanvasMouseOut(state) {
                if (state.hoveredCellKey !== null || state.currentImageToDraw !== state.defaultImage) {
                    state.hoveredCellKey = null;
                    state.currentImageToDraw = state.defaultImage;
                    requestAnimationFrame(() => drawCanvas(state)); // drawCanvas expects CanvasState
                }
            }

            // --- Setup Canvases with Loaded Images ---
            function assignImagesAndSetupCanvases() {
                const availableImages = allJJKImages.filter(img => img && img.complete && img.naturalWidth > 0);

                if (availableImages.length === 0) {
                    console.error("No JJK images loaded successfully. Canvases will show placeholders.");
                }
                
                let imagePoolForAssignment = [...availableImages];

                canvasElementsRaw.forEach((canvasElRaw, index) => {
                    if (canvasElRaw instanceof HTMLCanvasElement) {
                        const canvasEl = canvasElRaw;
                        const ctx = canvasEl.getContext("2d");
                        if (!ctx) {
                            console.error(`Failed to get 2D context for canvas ${canvasEl.id}`);
                            return;
                        }
                        
                        const defaultImg = imagePoolForAssignment.length > 0 ? imagePoolForAssignment.shift() : null;

                        /** @type {CanvasState} */
                        const state = {
                            id: canvasEl.id,
                            canvasElement: canvasEl,
                            ctx: ctx,
                            canvasIndex: index,
                            activePattern: visibleCellsPattern[index],
                            defaultImage: defaultImg,
                            currentImageToDraw: defaultImg,
                            hoveredCellKey: null,
                        };
                        canvasDisplayStates.push(state);

                        canvasEl.addEventListener("mousemove", (event) => handleCanvasMouseMove(event, state));
                        canvasEl.addEventListener("mouseout", () => handleCanvasMouseOut(state));
                    } else {
                        console.warn(`Canvas element with id canvas${index+1} not found or not an HTMLCanvasElement.`);
                    }
                });

                let hoverImageAssignIndex = 0;
                for (const state of canvasDisplayStates) {
                    state.activePattern.forEach(/** @param {[number, number]} cellTuple */ ([r, c]) => { 
                        const key = `${state.canvasIndex}-${r}-${c}`;
                        if (hoverImageAssignIndex < imagePoolForAssignment.length) {
                            activeCellToImageMap.set(key, imagePoolForAssignment[hoverImageAssignIndex]);
                            hoverImageAssignIndex++;
                        }
                    });
                }
                console.log(`${activeCellToImageMap.size} active cells mapped to hover images.`);
                console.log(`${canvasDisplayStates.filter(s => s.defaultImage).length} canvases have default images.`);

                if (canvasDisplayStates.length > 0) {
                    requestAnimationFrame(drawAllCanvases);
                } else {
                    console.error("No canvases were initialized. Skipping initial draw.");
                }
            }
            
            // --- Drawing Functions ---
            /** @param {CanvasState} state */
            function drawCanvas(state) {
                const { canvasElement, ctx, activePattern, currentImageToDraw } = state;
                const dpr = window.devicePixelRatio || 1;
                const parentContainer = canvasElement.parentElement;

                if (!parentContainer) {
                    console.error(`Parent container not found for canvas ${canvasElement.id}`);
                    return;
                }

                const containerWidth = parentContainer.clientWidth;
                let canvasStyleWidth = parseFloat(getComputedStyle(canvasElement).width);
                if (!canvasStyleWidth && containerWidth) {
                    const numCanvases = canvasDisplayStates.length > 0 ? canvasDisplayStates.length : 3;
                    canvasStyleWidth = (containerWidth / numCanvases) * 0.9;
                }

                state.cellWidth = canvasStyleWidth / (NUM_COLS + (NUM_COLS + 1) * CELL_GAP_PERCENT);
                state.gap = state.cellWidth * CELL_GAP_PERCENT;
                state.cellHeight = state.cellWidth;

                state.canvasActualWidth = NUM_COLS * state.cellWidth + (NUM_COLS + 1) * state.gap;
                state.canvasActualHeight = NUM_ROWS * state.cellHeight + (NUM_ROWS + 1) * state.gap;

                canvasElement.width = Math.round(state.canvasActualWidth * dpr);
                canvasElement.height = Math.round(state.canvasActualHeight * dpr);
                canvasElement.style.width = `${state.canvasActualWidth}px`;
                canvasElement.style.height = `${state.canvasActualHeight}px`;

                ctx.save();
                ctx.scale(dpr, dpr);
                ctx.clearRect(0, 0, state.canvasActualWidth, state.canvasActualHeight);
                
                for (let r = 0; r < NUM_ROWS; r++) {
                    for (let c = 0; c < NUM_COLS; c++) {
                        /** @param {[number, number]} p */
                        const isCellVisible = activePattern.some(p => p[0] === r && p[1] === c);
                        if (!isCellVisible) continue;

                        const x = (state.gap ?? 0) + c * ((state.cellWidth ?? 0) + (state.gap ?? 0));
                        const y = (state.gap ?? 0) + r * ((state.cellHeight ?? 0) + (state.gap ?? 0));

                        const imageToRender = currentImageToDraw;

                        if (imageToRender && imageToRender.complete && imageToRender.naturalWidth > 0) {
                            const imgGridCols = NUM_COLS;
                            const imgGridRows = NUM_ROWS;
                            const sx = (c / imgGridCols) * imageToRender.naturalWidth;
                            const sy = (r / imgGridRows) * imageToRender.naturalHeight;
                            const sWidth = (1 / imgGridCols) * imageToRender.naturalWidth;
                            const sHeight = (1 / imgGridRows) * imageToRender.naturalHeight;

                            ctx.save();
                            ctx.beginPath();
                            ctx.rect(x, y, state.cellWidth ?? 0, state.cellHeight ?? 0);
                            ctx.clip();
                            ctx.drawImage(imageToRender, sx, sy, sWidth, sHeight, x, y, state.cellWidth ?? 0, state.cellHeight ?? 0);
                            ctx.restore();
                        } else {
                            ctx.fillStyle = imageToRender === null ? "rgba(0,0,0,0.1)" : "red";
                            ctx.fillRect(x, y, state.cellWidth ?? 0, state.cellHeight ?? 0);
                            if (imageToRender !== null) {
                                ctx.fillStyle = "white";
                                ctx.textAlign = "center";
                                ctx.textBaseline = "middle";
                                ctx.font = `${Math.min(state.cellWidth ?? 20, state.cellHeight ?? 20) * 0.3}px sans-serif`;
                                ctx.fillText("!", x + (state.cellWidth ?? 0) / 2, y + (state.cellHeight ?? 0) / 2);
                            }
                        }
                    }
                }
                ctx.restore();
            }

            function drawAllCanvases() {
                canvasDisplayStates.forEach(state => { // state is CanvasState due to canvasDisplayStates typing
                    if (state.ctx) {
                         drawCanvas(state);
                    }
                });
            }
            
            function onResize() {
                requestAnimationFrame(drawAllCanvases);
            }
            window.addEventListener("resize", onResize);
            
            loadJJKImages();

            // Interactive tilt effect for canvases (original logic)
            const MAX_ROTATE = 30;
            let currentRotateX = 0;
            let currentRotateY = 0;
            let targetRotateX = 0;
            let targetRotateY = 0;

            // Parallax effect for background (original logic)
            const parallaxFactor = 0.5;

            /** @param {MouseEvent} event */
            function handleGlobalMouseMove(event) {
                const centerX = window.innerWidth / 2;
                const centerY = window.innerHeight / 2;

                const deltaX = event.clientX - centerX;
                const deltaY = event.clientY - centerY;

                targetRotateY = (deltaX / centerX) * MAX_ROTATE;
                targetRotateX = -(deltaY / centerY) * MAX_ROTATE;

                document.body.style.setProperty('--mouse-x', `${event.clientX}px`);
                document.body.style.setProperty('--mouse-y', `${event.clientY}px`);
            }

            function updateTransforms() {
                currentRotateX += (targetRotateX - currentRotateX) * 0.1;
                currentRotateY += (targetRotateY - currentRotateY) * 0.1;

                canvasElementsRaw.forEach((canvasEl) => {
                    if (canvasEl instanceof HTMLCanvasElement) {
                        canvasEl.style.transform = `rotateX(${currentRotateX}deg) rotateY(${currentRotateY}deg)`;
                    }
                });
                
                const parallaxXVal = (-currentRotateY / MAX_ROTATE) * (50 * parallaxFactor);
                const parallaxYVal = (-currentRotateX / MAX_ROTATE) * (50 * parallaxFactor);
                document.body.style.backgroundPosition = `calc(50% + ${-parallaxXVal}px) calc(50% + ${parallaxYVal}px)`;

                requestAnimationFrame(updateTransforms);
            }

            document.body.addEventListener("mousemove", handleGlobalMouseMove);
            requestAnimationFrame(updateTransforms);
        </script>
    </body>
</html>
